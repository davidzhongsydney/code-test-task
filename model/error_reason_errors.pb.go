// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package model

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsTaskIdUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TASK_ID_UNSPECIFIED.String() && e.Code == 400
}

func ErrorTaskIdUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_TASK_ID_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsTaskNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TASK_NOT_FOUND.String() && e.Code == 404
}

func ErrorTaskNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_TASK_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsTaskCreationError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TASK_CREATION_ERROR.String() && e.Code == 500
}

func ErrorTaskCreationError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TASK_CREATION_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsTaskDbTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TASK_DB_TIMEOUT.String() && e.Code == 500
}

func ErrorTaskDbTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TASK_DB_TIMEOUT.String(), fmt.Sprintf(format, args...))
}
