// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "qantas.com/task/model"
)

// TaskRepo is an autogenerated mock type for the TaskRepo type
type TaskRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TaskRepo) Create(_a0 context.Context, _a1 *model.Task) (*model.T_Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.T_Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) (*model.T_Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.T_Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.T_Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *TaskRepo) Delete(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Empty provides a mock function with given fields: _a0
func (_m *TaskRepo) Empty(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *TaskRepo) Get(_a0 context.Context, _a1 uint64) (*model.T_Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.T_Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.T_Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.T_Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.T_Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *TaskRepo) List(_a0 context.Context) ([]model.T_Task, error) {
	ret := _m.Called(_a0)

	var r0 []model.T_Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.T_Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.T_Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.T_Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *TaskRepo) Update(_a0 context.Context, _a1 *model.Task) (*model.T_Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.T_Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) (*model.T_Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.T_Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.T_Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepo creates a new instance of TaskRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepo(t mockConstructorTestingTNewTaskRepo) *TaskRepo {
	mock := &TaskRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
